type ADCategory @model @auth(rules: [
  { allow: groups, groups: ["admin"] },
  { allow: private, provider: iam, operations: [read] },
  { allow: public, provider: iam, operations: [read] },
  ]) {
  id: ID!
  name: String!
  image: String!
  products: [ADProduct] @hasMany(indexName: "byCategory", fields: ["id"])
  brands: [ADBrand] @manyToMany(relationName: "CategoryBrands")
}

type ADBrand @model @auth(rules: [
  { allow: groups, groups: ["admin"] },
  { allow: private, provider: iam, operations: [read] },
  { allow: public, provider: iam, operations: [read] },
  ]) {
  id: ID!
  name: String!
  image: String!
  products: [ADProduct] @hasMany(indexName: "byBrand", fields: ["id"])
  categories: [ADCategory] @manyToMany(relationName: "CategoryBrands")
}


type ADProduct @model @auth(rules: [
  { allow: groups, groups: ["admin"] },
  { allow: private, provider: iam, operations: [read] },
  { allow: public, provider: iam, operations: [read] },
  ]) {
  id: ID!
  name: String!
  images: [String!]!
  suggestedPrice: Float!
  categoryID: ID! @index(name: "byCategory", sortKeyFields: ["name"])
  brandID: ID! @index(name: "byBrand", sortKeyFields: ["name"])
} 

type Todo @model @auth(rules: [
  { allow: owner },
  { allow: private, provider: iam, operations: [read] },
  { allow: public, provider: iam, operations: [read] },
  ]) {
  id: ID!
  name: String
  description: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type Query {
  prueba: String @function(name: "Prueba-${env}")
  pruebaE: String @function(name: "portaty11dae80f-${env}")
}



type CustomerShop @model @auth(rules:[
  { allow: owner},
  { allow: private, provider: iam, operations: [read] },
  { allow: public, provider: iam, operations: [read] },
]){
  userID: ID! @primaryKey
  name: String! @auth(rules:[
    {allow: owner},
    {allow: private, provider: iam, operations: [read]},
    {allow: public, provider: iam, operations: [read]}
  ])
  email: String! @auth(rules:[
    {allow: owner},
    {allow: private, provider: iam, operations: [read]},
    {allow: public, provider: iam, operations: [read]}
  ])
  description: String
  products: [CustomerProduct] @hasMany(indexName: "byShop", fields: ["userID"])
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type CustomerProduct @model @auth(rules:[
  { allow: owner},
  { allow: private, provider: iam, operations: [read] },
  { allow: public, provider: iam, operations: [read] },
]){
  id: ID!
  customerID: ID! @index(name: "byShop")
  category: ID!
  brand: ID!
  productID: ID!
  price: Float!
  images: [String]
  condition: Condition
  description: String
  code: String
  status: CustomerProductStatus @belongsTo
# campos personalizado dependiendo del producto
  phoneFields: PhoneFields
  laptoFields: LaptoFields
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

type CustomerProductStatus @model @auth(rules:[
  {allow: groups, groups:["admin"]},
  {allow: owner, operations: [read, delete]}
]){
  id: ID!
  productID: ID
  product: CustomerProduct @hasOne(fields: ["productID"])
  status: ProductStatusValue @default(value: "PUBLISHED")
  owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])
}

enum ProductStatusValue {
  PUBLISHED
  PENDING
  UNPUBLISHED
}

enum Condition {
  NEW
  PERFECT
  GOOD
  USED
}

type PhoneFields {
  carrier: String!
  imei: String!
  model: String!
  storage: String!
  batery: String!
}

type LaptoFields {
  serial: String!
}